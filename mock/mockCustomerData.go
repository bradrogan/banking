// Code generated by MockGen. DO NOT EDIT.
// Source: ./customerSvc.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	customer "github.com/bradrogan/banking/domain/customer"
	errs "github.com/bradrogan/banking/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockcustomerData is a mock of customerData interface.
type MockcustomerData struct {
	ctrl     *gomock.Controller
	recorder *MockcustomerDataMockRecorder
}

// MockcustomerDataMockRecorder is the mock recorder for MockcustomerData.
type MockcustomerDataMockRecorder struct {
	mock *MockcustomerData
}

// NewMockcustomerData creates a new mock instance.
func NewMockcustomerData(ctrl *gomock.Controller) *MockcustomerData {
	mock := &MockcustomerData{ctrl: ctrl}
	mock.recorder = &MockcustomerDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcustomerData) EXPECT() *MockcustomerDataMockRecorder {
	return m.recorder
}

// ByActive mocks base method.
func (m *MockcustomerData) ByActive(arg0 customer.Status) ([]customer.Customer, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByActive", arg0)
	ret0, _ := ret[0].([]customer.Customer)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ByActive indicates an expected call of ByActive.
func (mr *MockcustomerDataMockRecorder) ByActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByActive", reflect.TypeOf((*MockcustomerData)(nil).ByActive), arg0)
}

// ById mocks base method.
func (m *MockcustomerData) ById(arg0 string) (*customer.Customer, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockcustomerDataMockRecorder) ById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockcustomerData)(nil).ById), arg0)
}

// FindAll mocks base method.
func (m *MockcustomerData) FindAll() ([]customer.Customer, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]customer.Customer)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockcustomerDataMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockcustomerData)(nil).FindAll))
}
